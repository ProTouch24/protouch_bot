import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# Define buttons with emojis
bt1 = KeyboardButton(text="üè¢ –û –Ω–∞—Å")
bt2 = KeyboardButton(text="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
bt3 = KeyboardButton(text="üìã –í–∞–∫–∞–Ω—Å–∏–∏")
bt4 = KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
bt5 = KeyboardButton(text="üá∑üá∫/üá∫üáø –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
bt6 = KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
bt7 = KeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã")  # Button for products

# Create the main keyboard
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [bt1, bt2],
        [bt3, bt7],  # Product button
        [bt4, bt5]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# Create the products keyboard
products_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"), KeyboardButton(text="–ú–æ–Ω–æ–±–ª–æ–∫")],
        [KeyboardButton(text="–ö–∞–º–µ—Ä–∞"), KeyboardButton(text="–ò–Ω—Ñ–æ–∫iosk")],
        [bt6]  # Back button
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# User data storage (consider using a more robust solution for real apps)
user_data = {}

# Handle /start and /help commands
@dp.message(Command(commands=['start', 'help']))
async def welcome(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!", reply_markup=main_keyboard)

# Handle incoming messages
@dp.message()
async def handle_message(message: types.Message):
    global user_data

    if message.text == 'üè¢ –û –Ω–∞—Å':
        await message.answer("¬´ProTouch¬ª ‚Äî –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.", reply_markup=main_keyboard)
    elif message.text == 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        await message.answer("ProTouch.uz@gmail.com\nhttps://t.me/protouchuzb", reply_markup=main_keyboard)
    elif message.text == 'üìã –í–∞–∫–∞–Ω—Å–∏–∏':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫:", reply_markup=main_keyboard)
    elif message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await message.answer("+998974330303; +998951937700\n9:00 - 18:00\n–ê–¥—Ä–µ—Å: Asaka-street 35, 700100, –¢–∞—à–∫–µ–Ω—Ç", reply_markup=main_keyboard)
    
    # Handle product selection
    elif message.text == 'üõí –¢–æ–≤–∞—Ä—ã':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=products_keyboard)
    
    # Handle product choice
    elif message.text in ["–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å", "–ú–æ–Ω–æ–±–ª–æ–∫", "–ö–∞–º–µ—Ä–∞", "–ò–Ω—Ñ–æ–∫iosk"]:
        user_data['product'] = message.text  # Save selected product
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {message.text}. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ? –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=main_keyboard)
        user_data['step'] = 'waiting_for_quantity'  # Update user state
    
    # Handle quantity input
    elif user_data.get('step') == 'waiting_for_quantity':
        try:
            quantity = int(message.text)
            user_data['quantity'] = quantity
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=main_keyboard)
            user_data['step'] = 'waiting_for_name'
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=main_keyboard)
    
    # Handle name input
    elif user_data.get('step') == 'waiting_for_name':
        user_data['name'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=main_keyboard)
        user_data['step'] = 'waiting_for_surname'
    
    # Handle surname input
    elif user_data.get('step') == 'waiting_for_surname':
        user_data['surname'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=main_keyboard)
        user_data['step'] = 'waiting_for_phone'
    
    # Handle phone number input
    elif user_data.get('step') == 'waiting_for_phone':
        user_data['phone'] = message.text
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_keyboard)

        # Optionally reset user data or state here
        user_data.clear()  # Clear user data after processing the order

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))